generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  firstName        String
  lastName         String
  email            String         @unique
  password         String // Hashed password
  face             String? // Profile picture (URL or base64)
  bio              String? // Short description about themselves
  gradeId          String?
  grade            Grade?         @relation(fields: [gradeId], references: [id])
  skills           StudentSkill[]
  socialLinks      SocialLink[]
  juniors          Mentorship[]   @relation("SeniorToJunior")
  seniors          Mentorship[]   @relation("JuniorToSenior")
  requestsSent     Request[]      @relation("RequestSender")
  requestsReceived Request[]      @relation("RequestReceiver")
  messagesSent     Message[]      @relation("MessageSender")
  messagesReceived Message[]      @relation("MessageReceiver")
  createdAt        DateTime       @default(now())
}

model Grade {
  id             String @id @default(uuid())
  name           String @unique // e.g., "Grande École", "Bachelor Web"
  year           Int // e.g., 1, 2, 3 (Première Année, Deuxième Année)
  graduationYear String @unique // e.g., "P2026" for Promo 2026
  students       User[]
}

model Skill {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  students    StudentSkill[]
}

model StudentSkill {
  id        String @id @default(uuid())
  studentId String
  skillId   String
  ability   Int // Self-evaluated (0-5)
  peerScore Float? // Peer-evaluated score
  student   User   @relation(fields: [studentId], references: [id])
  skill     Skill  @relation(fields: [skillId], references: [id])

  @@unique([studentId, skillId]) // A student has one rating per skill
}

model SocialLink {
  id     String @id @default(uuid())
  userId String
  type   String // Enum-like (LinkedIn, GitHub, Personal Website, Dribbble, etc.)
  url    String // Link to the profile
  user   User   @relation(fields: [userId], references: [id])
}

model Mentorship {
  id       String @id @default(uuid())
  seniorId String
  juniorId String
  senior   User   @relation(fields: [seniorId], references: [id], name: "SeniorToJunior")
  junior   User   @relation(fields: [juniorId], references: [id], name: "JuniorToSenior")

  @@unique([seniorId, juniorId]) // One junior per senior
}

model Request {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // Can be "pending", "accepted", or "rejected"
  sender     User     @relation(fields: [senderId], references: [id], name: "RequestSender")
  receiver   User     @relation(fields: [receiverId], references: [id], name: "RequestReceiver")
  message    String? // Optional message with request
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId]) // Prevent duplicate requests
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())
  sender     User     @relation(fields: [senderId], references: [id], name: "MessageSender")
  receiver   User     @relation(fields: [receiverId], references: [id], name: "MessageReceiver")
}
